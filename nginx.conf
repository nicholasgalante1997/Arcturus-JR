worker_processes auto;

events {
    # Defines the maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections 1024;
}

http {
    # Basic settings

    # Enables or disables the use of sendfile().
    # When enabled, NGINX uses the efficient sendfile system call for copying data from
    # file to socket, bypassing user space buffer and improving performance.
    sendfile on;

    # Used in conjunction with sendfile.
    # Causes NGINX to attempt to send its HTTP response headers in one packet,
    # followed by the file contents in another packet. 
    # This optimizes network usage by reducing the number of packets sent.
    tcp_nopush on;

    # Disables the Nagle algorithm for sending data.
    # This forces data to be sent immediately, rather than waiting to create larger packets.
    # Improves responsiveness for interactive applications at a slight cost to efficiency.
    tcp_nodelay on;

    # Sets how long client connections will stay open on the server side.
    # After 65 seconds of inactivity, the server will close the connection.
    # Balances between keeping connections open for reuse and freeing server resources.
    keepalive_timeout 65;

    # Sets the maximum size of the types hash tables.
    # A larger value decreases lookup time but uses more memory.
    # Default is usually adequate; increase if you get "types_hash" warnings.
    types_hash_max_size 2048;

    # Prevents NGINX from sending its version number in error pages and Server header.
    # This is a security measure to avoid revealing server software information to potential attackers.
    server_tokens off;

    # MIME types

    # Includes the file that maps file extensions to MIME types.
    # This allows NGINX to properly set Content-Type headers for responses.
    include /etc/nginx/mime.types;

    # Sets the default MIME type for responses when the type cannot be determined.
    # 'application/octet-stream' indicates a binary file, prompting browsers to download rather than display.
    default_type application/octet-stream;

    # Logging

    # Configures the path and format for the access log.
    # Records all requests to the server, useful for traffic analysis and troubleshooting.
    access_log /var/log/nginx/access.log;

    # Configures the path and format for the error log.
    # Records any errors encountered by NGINX, critical for debugging server issues.
    error_log /var/log/nginx/error.log;

    # Gzip compression

    # Enables gzip compression to reduce the size of transmitted data,
    # improving load times and reducing bandwidth usage.
    gzip on;

    # Disables gzip for MSIE 6.0 which had issues with compression.
    # This is for backwards compatibility with old Internet Explorer browsers.
    gzip_disable "msie6";

    # Adds the "Vary: Accept-Encoding" response header.
    # This header helps caches store both compressed and uncompressed versions
    # correctly based on client capabilities.
    gzip_vary on;

    # Sets which proxied requests should be compressed.
    # 'any' means compress responses to any proxied request.
    gzip_proxied any;

    # Sets the compression level (1-9).
    # Level 6 offers a good balance between CPU usage and compression ratio.
    # Higher values compress more but use more CPU.
    gzip_comp_level 6;

    # Configures the number and size of buffers for compression.
    # '16 8k' means 16 buffers of 8KB each.
    # This affects memory usage during compression.
    gzip_buffers 16 8k;

    # Sets minimum HTTP version for compression.
    # HTTP/1.1 supports better indication of compression support.
    gzip_http_version 1.1;

    # Lists all MIME types that should be compressed.
    # Includes text, JavaScript, CSS, and JSON - content that compresses well.
    # Images and videos are typically excluded as they're already compressed.
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    server {
        # Listen on port 80 for HTTP requests
        listen 80;
        
        # Accept requests for any hostname (wildcard)
        server_name _;
        
        # Root directory where static files are served from
        root /usr/share/nginx/html;
        
        # Default file to serve when directory is requested
        index index.html;

        # Security headers
        
        # Prevents page from being embedded in frames (clickjacking protection)
        add_header X-Frame-Options "SAMEORIGIN" always;
        
        # Enables browser XSS filter and blocks page if attack detected
        add_header X-XSS-Protection "1; mode=block" always;
        
        # Prevents MIME type sniffing attacks
        add_header X-Content-Type-Options "nosniff" always;
        
        # Controls referrer information sent with requests
        add_header Referrer-Policy "no-referrer-when-downgrade" always;

        # Main location block for SPA routing
        location / {
            # Try to serve request as file, then as directory, finally fallback to index.html
            # Essential for client-side routing in SPAs
            try_files $uri $uri/ /index.html;
        }

        # Cache static assets aggressively (JS, CSS, images, fonts)
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            # Cache for 1 week
            expires 1w;
            # Mark as immutable since these files are typically versioned
            add_header Cache-Control "public, immutable";
        }

        # Cache HTML files with shorter duration for faster updates
        location ~* \.html$ {
            # Cache for 1 hour
            expires 1h;
            # Must revalidate to ensure fresh content
            add_header Cache-Control "public, must-revalidate";
        }
    }
}